!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CONF_H	conf.h	2;"	d
CONNECTION_H	connection.h	2;"	d
DESTROY_MEM	typedef.h	7;"	d
HTTPS_CERT_ERROR	typedef.h	117;"	d
HTTPS_NO_CERT	typedef.h	118;"	d
HTTP_HEADER_CONNECTION	typedef.h	144;"	d
HTTP_HEADER_CONTENT_LEN	typedef.h	149;"	d
HTTP_HEADER_CONTENT_TYPE	typedef.h	148;"	d
HTTP_HEADER_DATE	typedef.h	145;"	d
HTTP_HEADER_HOST	typedef.h	147;"	d
HTTP_HEADER_KEEPALIVE	typedef.h	150;"	d
HTTP_HEADER_SERVER	typedef.h	146;"	d
HTTP_MODULE_PROCESS_DONE	module.h	5;"	d
HTTP_MODULE_PROCESS_FAIL	module.h	6;"	d
HTTP_MODULE_PROCESS_UPSTREAM	module.h	7;"	d
HTTP_PARSE_AGAIN	connection.c	19;"	d	file:
HTTP_PARSE_DONE	connection.c	17;"	d	file:
HTTP_PARSE_FAIL	connection.c	18;"	d	file:
HTTP_STATUS_ACCEPTED	typedef.h	85;"	d
HTTP_STATUS_BAD_GATEWAY	typedef.h	139;"	d
HTTP_STATUS_BAD_REQUEST	typedef.h	96;"	d
HTTP_STATUS_CLIENT_CLOSED_REQUEST	typedef.h	134;"	d
HTTP_STATUS_CLOSE	typedef.h	111;"	d
HTTP_STATUS_CONFLICT	typedef.h	102;"	d
HTTP_STATUS_CREATED	typedef.h	84;"	d
HTTP_STATUS_FORBIDDEN	typedef.h	98;"	d
HTTP_STATUS_GATEWAY_TIME_OUT	typedef.h	141;"	d
HTTP_STATUS_INSUFFICIENT_STORAGE	typedef.h	142;"	d
HTTP_STATUS_INTERNAL_SERVER_ERROR	typedef.h	137;"	d
HTTP_STATUS_LENGTH_REQUIRED	typedef.h	103;"	d
HTTP_STATUS_MOVED_PERMANENTLY	typedef.h	90;"	d
HTTP_STATUS_MOVED_TEMPORARILY	typedef.h	91;"	d
HTTP_STATUS_NGINX_CODES	typedef.h	113;"	d
HTTP_STATUS_NOT_ALLOWED	typedef.h	100;"	d
HTTP_STATUS_NOT_FOUND	typedef.h	99;"	d
HTTP_STATUS_NOT_IMPLEMENTED	typedef.h	138;"	d
HTTP_STATUS_NOT_MODIFIED	typedef.h	93;"	d
HTTP_STATUS_NO_CONTENT	typedef.h	86;"	d
HTTP_STATUS_OK	typedef.h	83;"	d
HTTP_STATUS_PARTIAL_CONTENT	typedef.h	87;"	d
HTTP_STATUS_PRECONDITION_FAILED	typedef.h	104;"	d
HTTP_STATUS_RANGE_NOT_SATISFIABLE	typedef.h	108;"	d
HTTP_STATUS_REQUEST_ENTITY_TOO_LARGE	typedef.h	105;"	d
HTTP_STATUS_REQUEST_HEADER_TOO_LARGE	typedef.h	115;"	d
HTTP_STATUS_REQUEST_TIME_OUT	typedef.h	101;"	d
HTTP_STATUS_REQUEST_URI_TOO_LARGE	typedef.h	106;"	d
HTTP_STATUS_SEE_OTHER	typedef.h	92;"	d
HTTP_STATUS_SERVICE_UNAVAILABLE	typedef.h	140;"	d
HTTP_STATUS_SPECIAL_RESPONSE	typedef.h	89;"	d
HTTP_STATUS_TEMPORARY_REDIRECT	typedef.h	94;"	d
HTTP_STATUS_TO_HTTPS	typedef.h	124;"	d
HTTP_STATUS_UNAUTHORIZED	typedef.h	97;"	d
HTTP_STATUS_UNSUPPORTED_MEDIA_TYPE	typedef.h	107;"	d
HTTP_UPSTREAM_DONE	upstream.h	3;"	d
HTTP_UPSTREAM_FAIL	upstream.h	4;"	d
IS_DELIM	utils.c	13;"	d	file:
IS_DELIM_FUNC	utils.h	/^typedef int (*IS_DELIM_FUNC)(int c);$/;"	t
MAX_ATTR_NR	typedef.h	12;"	d
METHOD_GET	typedef.h	/^	METHOD_GET = 0,$/;"	e	enum:__anon1
METHOD_HEAD	typedef.h	/^	METHOD_HEAD,$/;"	e	enum:__anon1
METHOD_POST	typedef.h	/^	METHOD_POST,$/;"	e	enum:__anon1
MODULE_CREATE_FUNC	module.h	/^typedef module_t* (*MODULE_CREATE_FUNC)(server_t* server, module_so_conf_t* conf, module_param_t* params, size_t param_nr);$/;"	t
MODULE_H	module.h	2;"	d
MODULE_TYPE_FILTER	conf.h	/^	MODULE_TYPE_FILTER,$/;"	e	enum:__anon3
MODULE_TYPE_FILTER	conf.h	4;"	d
MODULE_TYPE_HANDLER	conf.h	/^	MODULE_TYPE_HANDLER = 0,$/;"	e	enum:__anon3
MODULE_TYPE_HANDLER	conf.h	3;"	d
ModuleDefaultPriv	modules/module_default.c	/^}ModuleDefaultPriv;$/;"	t	typeref:struct:_ModuleDefaultPriv	file:
POOL_H	pool.h	2;"	d
PrivInfo	xml_builder_tree.c	/^}PrivInfo;$/;"	t	typeref:struct:_PrivInfo	file:
SAFE_FREE	typedef.h	10;"	d
SERVER_H	server.h	2;"	d
Server	server.h	/^typedef struct _Server Server;$/;"	t	typeref:struct:_Server
Server	trash/vhost.h	/^typedef struct _Server Server;$/;"	t	typeref:struct:_Server
TYPEDEF_H	typedef.h	2;"	d
UPSTREAM_H	upstream.h	2;"	d
UTILS_H	utils.h	2;"	d
VHOST_H	trash/vhost.h	2;"	d
Vhost	trash/vhost.c	/^}Vhost;$/;"	t	typeref:struct:_Vhost	file:
Vhost	trash/vhost.h	/^typedef struct _Vhost Vhost;$/;"	t	typeref:struct:_Vhost
VhostLoc	trash/vhost.c	/^}VhostLoc;$/;"	t	typeref:struct:_VhostLoc	file:
XML_BUILDER_H	xml_builder.h	35;"	d
XML_BUILDER_TREE_H	xml_builder_tree.h	33;"	d
XML_NODE_COMMENT	xml_tree.h	/^	XML_NODE_COMMENT$/;"	e	enum:_XmlNodeType
XML_NODE_NONE	xml_tree.h	/^	XML_NODE_NONE,$/;"	e	enum:_XmlNodeType
XML_NODE_NORMAL	xml_tree.h	/^	XML_NODE_NORMAL,$/;"	e	enum:_XmlNodeType
XML_NODE_PI	xml_tree.h	/^	XML_NODE_PI,$/;"	e	enum:_XmlNodeType
XML_NODE_TEXT	xml_tree.h	/^	XML_NODE_TEXT,$/;"	e	enum:_XmlNodeType
XML_PARSER_H	xml_parser.h	2;"	d
XML_TREE_H	xml_tree.h	36;"	d
XmlAttr	xml_tree.h	/^}XmlAttr;$/;"	t	typeref:struct:_XmlAttr
XmlBuilder	xml_builder.h	/^typedef struct _XmlBuilder XmlBuilder;$/;"	t	typeref:struct:_XmlBuilder
XmlBuilderDestroyFunc	xml_builder.h	/^typedef void (*XmlBuilderDestroyFunc)(XmlBuilder* thiz);$/;"	t
XmlBuilderOnCommentFunc	xml_builder.h	/^typedef void (*XmlBuilderOnCommentFunc)(XmlBuilder* thiz, const char* text, size_t length);$/;"	t
XmlBuilderOnEndElementFunc	xml_builder.h	/^typedef void (*XmlBuilderOnEndElementFunc)(XmlBuilder* thiz, const char* tag);$/;"	t
XmlBuilderOnErrorFunc	xml_builder.h	/^typedef void (*XmlBuilderOnErrorFunc)(XmlBuilder* thiz, int line, int row, const char* message);$/;"	t
XmlBuilderOnPiElementFunc	xml_builder.h	/^typedef void (*XmlBuilderOnPiElementFunc)(XmlBuilder* thiz, const char* tag, const char** attrs);$/;"	t
XmlBuilderOnStartElementFunc	xml_builder.h	/^typedef void (*XmlBuilderOnStartElementFunc)(XmlBuilder* thiz, const char* tag, const char** attrs);$/;"	t
XmlBuilderOnTextFunc	xml_builder.h	/^typedef void (*XmlBuilderOnTextFunc)(XmlBuilder* thiz, const char* text, size_t length);$/;"	t
XmlNode	xml_tree.h	/^}XmlNode;$/;"	t	typeref:struct:_XmlNode
XmlNodeNormal	xml_tree.h	/^}XmlNodeNormal;$/;"	t	typeref:struct:_XmlNodeNormal
XmlNodePi	xml_tree.h	/^}XmlNodePi;$/;"	t	typeref:struct:_XmlNodePi
XmlNodeType	xml_tree.h	/^}XmlNodeType;$/;"	t	typeref:enum:_XmlNodeType
XmlNodeVisitFunc	xml_tree.h	/^typedef Ret (*XmlNodeVisitFunc)(void* ctx, int level, XmlNode* node);$/;"	t
XmlParser	xml_parser.h	/^typedef struct _XmlParser XmlParser;$/;"	t	typeref:struct:_XmlParser
_ModuleDefaultPriv	modules/module_default.c	/^typedef struct _ModuleDefaultPriv$/;"	s	file:
_PrivInfo	xml_builder_tree.c	/^typedef struct _PrivInfo$/;"	s	file:
_Vhost	trash/vhost.c	/^typedef struct _Vhost$/;"	s	file:
_VhostLoc	trash/vhost.c	/^typedef struct _VhostLoc$/;"	s	file:
_XmlAttr	xml_tree.h	/^typedef struct _XmlAttr$/;"	s
_XmlBuilder	xml_builder.h	/^struct _XmlBuilder$/;"	s
_XmlNode	xml_tree.h	/^typedef struct _XmlNode$/;"	s
_XmlNodeNormal	xml_tree.h	/^typedef struct _XmlNodeNormal$/;"	s
_XmlNodePi	xml_tree.h	/^typedef struct _XmlNodePi$/;"	s
_XmlNodeType	xml_tree.h	/^typedef enum _XmlNodeType$/;"	g
_XmlParser	xml_parser.c	/^struct _XmlParser$/;"	s	file:
_module	module.h	/^typedef struct _module$/;"	s
array_init	utils.c	/^int array_init(array_t* thiz, pool_t* pool, int nalloc)$/;"	f
array_push	utils.c	/^int array_push(array_t* thiz, void* data)$/;"	f
array_s	typedef.h	/^typedef struct array_s$/;"	s
array_t	typedef.h	/^}array_t;$/;"	t	typeref:struct:array_s
attrs	xml_parser.c	/^	char* attrs[2*MAX_ATTR_NR+1];$/;"	m	struct:_XmlParser	file:
attrs_nr	xml_parser.c	/^	int   attrs_nr;$/;"	m	struct:_XmlParser	file:
author	conf.h	/^	char* author;$/;"	m	struct:module_so_conf_s
body_buf	typedef.h	/^	buf_t body_buf;$/;"	m	struct:http_request_s
buf_create	utils.c	/^int buf_create(buf_t* thiz, pool_t* pool, int size)$/;"	f
buf_s	typedef.h	/^typedef struct buf_s$/;"	s
buf_t	typedef.h	/^}buf_t;$/;"	t	typeref:struct:buf_s
buffer	xml_parser.c	/^	char* buffer;$/;"	m	struct:_XmlParser	file:
buffer_total	xml_parser.c	/^	int buffer_total;$/;"	m	struct:_XmlParser	file:
buffer_used	xml_parser.c	/^	int buffer_used;$/;"	m	struct:_XmlParser	file:
builder	xml_parser.c	/^	XmlBuilder* builder;$/;"	m	struct:_XmlParser	file:
children	xml_tree.h	/^	struct _XmlNode* children;$/;"	m	struct:_XmlNode	typeref:struct:_XmlNode::_XmlNode
client_header_size	conf.h	/^	int client_header_size;$/;"	m	struct:conf_s
comment	xml_tree.h	/^		char* comment;$/;"	m	union:_XmlNode::__anon2
conf	connection.h	/^	conf_t* conf;$/;"	m	struct:connection_s
conf	server.c	/^	conf_t* conf;$/;"	m	struct:server_s	file:
conf_s	conf.h	/^typedef struct conf_s$/;"	s
conf_t	conf.h	/^}conf_t;$/;"	t	typeref:struct:conf_s
config_parse	conf.c	/^conf_t* config_parse(const char* config_file, pool_t* pool)$/;"	f
config_parse_defaultpages	conf.c	/^static void config_parse_defaultpages(conf_t* thiz, XmlNode* root, pool_t* pool)$/;"	f	file:
config_parse_loadmodule	conf.c	/^static void config_parse_loadmodule(conf_t* thiz, XmlNode* root)$/;"	f	file:
config_parse_location	conf.c	/^static void config_parse_location(conf_t* thiz, XmlNode* root, vhost_conf_t* vhost)$/;"	f	file:
config_parse_vhost	conf.c	/^static void config_parse_vhost(conf_t* thiz, XmlNode* root)$/;"	f	file:
connection_alloc_large_header_buf	connection.c	/^static int connection_alloc_large_header_buf(connection_t* thiz)$/;"	f	file:
connection_calculate_response_len	connection.c	/^static size_t connection_calculate_response_len(connection_t* thiz)$/;"	f	file:
connection_check_timeout	connection.c	/^int connection_check_timeout(connection_t* thiz)$/;"	f
connection_close	connection.c	/^int connection_close(connection_t* thiz)$/;"	f
connection_finalize_request	connection.c	/^static int connection_finalize_request(connection_t* thiz)$/;"	f	file:
connection_gen_request	connection.c	/^static int connection_gen_request(connection_t* thiz)$/;"	f	file:
connection_init	connection.c	/^int connection_init(connection_t* thiz, conf_t* conf)$/;"	f
connection_nr	server.c	/^	size_t connection_nr;$/;"	m	struct:server_s	file:
connection_parse_header_line	connection.c	/^static int connection_parse_header_line(connection_t* thiz)$/;"	f	file:
connection_parse_request_line	connection.c	/^static int connection_parse_request_line(connection_t* thiz)$/;"	f	file:
connection_parse_url	connection.c	/^static int connection_parse_url(connection_t* thiz, str_t* url)$/;"	f	file:
connection_process_request	connection.c	/^static int connection_process_request(connection_t* thiz)$/;"	f	file:
connection_reusable	connection.c	/^static int connection_reusable(connection_t* thiz, int reuseable)$/;"	f	file:
connection_run	connection.c	/^int connection_run(connection_t* thiz, int fd)$/;"	f
connection_s	connection.h	/^typedef struct connection_s$/;"	s
connection_send_response	connection.c	/^static int connection_send_response(connection_t* thiz)$/;"	f	file:
connection_special_response	connection.c	/^static int connection_special_response(connection_t* thiz, int status)$/;"	f	file:
connection_t	connection.h	/^}connection_t;$/;"	t	typeref:struct:connection_s
connection_timeout	conf.h	/^	int connection_timeout;$/;"	m	struct:conf_s
connections	server.c	/^	connection_t* connections;$/;"	m	struct:server_s	file:
content_body	typedef.h	/^	buf_t content_body;$/;"	m	struct:http_response_s
content_fd	typedef.h	/^	int content_fd;$/;"	m	struct:http_response_s
content_length	typedef.h	/^	int content_length;$/;"	m	struct:http_request_s
count	typedef.h	/^	int count;$/;"	m	struct:array_s
current	xml_builder_tree.c	/^	XmlNode* current;$/;"	m	struct:_PrivInfo	file:
data	typedef.h	/^	char* data; \/\/should be zero terminated.$/;"	m	struct:str_s
default_loc	conf.h	/^	vhost_loc_conf_t* default_loc;$/;"	m	struct:vhost_conf_s
default_pages	conf.h	/^	array_t default_pages; \/\/char*$/;"	m	struct:conf_s
default_pages	conf.h	/^	array_t default_pages;$/;"	m	struct:vhost_conf_s
description	conf.h	/^	char* description;$/;"	m	struct:module_so_conf_s
destroy	module.h	/^	MODULE_DESTROY_FUNC destroy;$/;"	m	struct:_module
destroy	xml_builder.h	/^	XmlBuilderDestroyFunc        destroy;$/;"	m	struct:_XmlBuilder
dump_tree	xml_builder_tree.c	/^void dump_tree(XmlNode* tree)$/;"	f
elts	typedef.h	/^	void** elts;$/;"	m	struct:array_s
end	typedef.h	/^	char* end;$/;"	m	struct:buf_s
eol	connection.c	15;"	d	file:
fd	connection.h	/^	int fd;$/;"	m	struct:connection_s
find_next_eol	connection.c	/^static char* find_next_eol(char* line)$/;"	f	file:
first_attr	xml_tree.h	/^	XmlAttr* first_attr;$/;"	m	struct:_XmlNodeNormal
first_attr	xml_tree.h	/^	XmlAttr* first_attr;$/;"	m	struct:_XmlNodePi
fragment_id	typedef.h	/^	str_t fragment_id;$/;"	m	struct:url_s
free_connections	server.c	/^	connection_t* free_connections;$/;"	m	struct:server_s	file:
get_token	utils.c	/^int get_token(str_t* str, char** buf, IS_DELIM_FUNC delim_func, const char* delim)$/;"	f
global_handle_req	trash/globals.c	/^Ret global_handle_req(Server* thiz, HttpReq* req, HttpResp* resp)$/;"	f
guard_tids	server.c	/^	pthread_t guard_tids;$/;"	m	struct:server_s	file:
handle_module	trash/vhost.c	/^	Module* handle_module;$/;"	m	struct:_VhostLoc	file:
handler	conf.h	/^	module_t* handler;$/;"	m	struct:vhost_loc_conf_s
handler_name	conf.h	/^	char* handler_name;$/;"	m	struct:vhost_loc_conf_s
handler_params	conf.h	/^	array_t handler_params; \/\/ module_param_t*$/;"	m	struct:vhost_loc_conf_s
head	pool.c	/^	pool_node_s* head;	$/;"	m	struct:pool_s	file:
header_buf	typedef.h	/^	buf_t header_buf;$/;"	m	struct:http_request_s
headers	typedef.h	/^	array_t headers; \/\/http_header_t* $/;"	m	struct:http_request_s
headers	typedef.h	/^	array_t headers; \/\/http_header_t* $/;"	m	struct:http_response_s
host	typedef.h	/^	str_t host;$/;"	m	struct:url_s
host_name	trash/vhost.c	/^	char* host_name;$/;"	m	struct:_Vhost	file:
http_content_type	utils.c	/^const char* http_content_type(const char* extension)$/;"	f
http_header_equal	utils.c	/^int http_header_equal(array_t* headers, const char* name, const char* value)$/;"	f
http_header_int	utils.c	/^int http_header_int(array_t* headers, const char* name)$/;"	f
http_header_s	typedef.h	/^typedef struct http_header_s $/;"	s
http_header_set	utils.c	/^int http_header_set(array_t* headers, const str_t* name, const str_t* value)$/;"	f
http_header_str	utils.c	/^const str_t* http_header_str(array_t* headers, const char* name)$/;"	f
http_header_t	typedef.h	/^}http_header_t;$/;"	t	typeref:struct:http_header_s
http_method_e	typedef.h	/^}http_method_e;$/;"	t	typeref:enum:__anon1
http_request_s	typedef.h	/^typedef struct http_request_s$/;"	s
http_request_t	typedef.h	/^}http_request_t;$/;"	t	typeref:struct:http_request_s
http_response_s	typedef.h	/^typedef struct http_response_s$/;"	s
http_response_t	typedef.h	/^}http_response_t;$/;"	t	typeref:struct:http_response_s
http_status_infos	utils.c	/^static http_status_t http_status_infos[] = {$/;"	v	file:
http_status_line	utils.c	/^const char* http_status_line(int status)$/;"	f
http_status_s	utils.c	/^typedef struct http_status_s $/;"	s	file:
http_status_t	utils.c	/^}http_status_t;$/;"	t	typeref:struct:http_status_s	file:
init_req_ctx	trash/vhost.c	/^static void init_req_ctx(Vhost* thiz, VhostLoc* loc)$/;"	f	file:
inited	connection.h	/^	int inited;$/;"	m	struct:connection_s
ip	conf.h	/^	char* ip;$/;"	m	struct:conf_s
is_character	connection.c	16;"	d	file:
keep_alive	typedef.h	/^	int keep_alive;$/;"	m	struct:http_request_s
large_client_header_size	conf.h	/^	int large_client_header_size;$/;"	m	struct:conf_s
last	typedef.h	/^	char* last;$/;"	m	struct:buf_s
len	typedef.h	/^	size_t len;$/;"	m	struct:str_s
line	utils.c	/^	const char* line;$/;"	m	struct:http_status_s	file:
listen_fd	server.c	/^	int listen_fd;$/;"	m	struct:server_s	file:
listen_tid	server.c	/^	pthread_t* listen_tid;$/;"	m	struct:server_s	file:
loc_nr	trash/vhost.c	/^	size_t loc_nr;$/;"	m	struct:_Vhost	file:
locs	conf.h	/^	array_t locs; \/\/vhost_loc_conf_t*$/;"	m	struct:vhost_conf_s
locs	trash/vhost.c	/^	VhostLoc locs[MAX_VHOST_LOCATION];$/;"	m	struct:_Vhost	file:
main	main.c	/^int main(int argc, char** argv)$/;"	f
main	xml_builder_tree.c	/^int main(int argc, char* argv[])$/;"	f
main	xml_tree.c	/^int main(int argc, char* argv[])$/;"	f
max_content_len	conf.h	/^	int max_content_len;$/;"	m	struct:conf_s
max_threads	conf.h	/^	int max_threads;$/;"	m	struct:conf_s
method	typedef.h	/^	http_method_e method;$/;"	m	struct:http_request_s
module_create	conf.h	/^	MODULE_CREATE_FUNC module_create;$/;"	m	struct:module_so_conf_s
module_default_create	modules/module_default.c	/^Module* module_default_create(ModuleFactory* factory, ModuleParam param[])$/;"	f
module_default_destroy	modules/module_default.c	/^static Ret module_default_destroy(Module* thiz)$/;"	f	file:
module_default_handle_req	modules/module_default.c	/^static Ret module_default_handle_req(Module* thiz, const HttpReqCtx* req_ctx, $/;"	f	file:
module_destroy	module.h	/^static inline int module_destroy(module_t* thiz)$/;"	f
module_factory_create	modules/module_default.c	/^ModuleFactory* module_factory_create(Server* server)$/;"	f
module_factory_default_destroy	modules/module_default.c	/^static Ret module_factory_default_destroy(ModuleFactory* thiz)$/;"	f	file:
module_param_s	conf.h	/^typedef struct module_param_s$/;"	s
module_param_t	conf.h	/^}module_param_t;$/;"	t	typeref:struct:module_param_s
module_path	conf.h	/^	char* module_path;$/;"	m	struct:conf_s
module_process	module.h	/^static inline int module_process(module_t* thiz, http_request_t* request)$/;"	f
module_so_conf_s	conf.h	/^typedef struct module_so_conf_s$/;"	s
module_so_conf_t	conf.h	/^}module_so_conf_t;$/;"	t	typeref:struct:module_so_conf_s
module_sos	conf.h	/^	array_t module_sos;    \/\/module_so_conf_t*$/;"	m	struct:conf_s
module_t	module.h	/^}module_t;$/;"	t	typeref:struct:_module
module_type	conf.h	/^	module_type_e module_type; \/*0 handler, 1 filter.*\/$/;"	m	struct:module_so_conf_s
module_type_e	conf.h	/^}module_type_e;$/;"	t	typeref:enum:__anon3
mutex	connection.h	/^	pthread_mutex_t mutex;$/;"	m	struct:connection_s
mutex	server.c	/^	pthread_mutex_t mutex;$/;"	m	struct:server_s	file:
nalloc	typedef.h	/^	int nalloc;$/;"	m	struct:array_s
name	conf.h	/^	char* name;$/;"	m	struct:module_param_s
name	conf.h	/^	char* name;$/;"	m	struct:module_so_conf_s
name	conf.h	/^	char* name;$/;"	m	struct:vhost_conf_s
name	typedef.h	/^	str_t name;$/;"	m	struct:http_header_s
name	xml_tree.h	/^	char* name;	$/;"	m	struct:_XmlNodePi
name	xml_tree.h	/^	char* name;$/;"	m	struct:_XmlAttr
name	xml_tree.h	/^	char* name;$/;"	m	struct:_XmlNodeNormal
next	connection.h	/^	connection_t* next;$/;"	m	struct:connection_s
next	pool.c	/^	struct pool_node_s* next;$/;"	m	struct:pool_node_s	typeref:struct:pool_node_s::pool_node_s	file:
next	xml_tree.h	/^	struct _XmlAttr* next;$/;"	m	struct:_XmlAttr	typeref:struct:_XmlAttr::_XmlAttr
normal	xml_tree.h	/^		XmlNodeNormal normal;$/;"	m	union:_XmlNode::__anon2
nwrite	utils.c	/^int nwrite(int fd, char* buf, size_t len)$/;"	f
on_comment	xml_builder.h	/^	XmlBuilderOnCommentFunc      on_comment;$/;"	m	struct:_XmlBuilder
on_end_element	xml_builder.h	/^	XmlBuilderOnEndElementFunc   on_end_element;$/;"	m	struct:_XmlBuilder
on_error	xml_builder.h	/^	XmlBuilderOnErrorFunc        on_error;$/;"	m	struct:_XmlBuilder
on_pi_element	xml_builder.h	/^	XmlBuilderOnPiElementFunc    on_pi_element;$/;"	m	struct:_XmlBuilder
on_start_element	xml_builder.h	/^	XmlBuilderOnStartElementFunc on_start_element;$/;"	m	struct:_XmlBuilder
on_text	xml_builder.h	/^	XmlBuilderOnTextFunc         on_text;$/;"	m	struct:_XmlBuilder
open_listen_fd	utils.c	/^int open_listen_fd(char* ip, int port)$/;"	f
parent	conf.h	/^	vhost_conf_t* parent;$/;"	m	struct:vhost_loc_conf_s
parent	module.h	/^	module_so_conf_t* parent;$/;"	m	struct:_module
parent	xml_tree.h	/^	struct _XmlNode* parent;$/;"	m	struct:_XmlNode	typeref:struct:_XmlNode::_XmlNode
path	typedef.h	/^	str_t path;$/;"	m	struct:url_s
pattern_regex	conf.h	/^	regex_t pattern_regex;$/;"	m	struct:vhost_loc_conf_s
pattern_str	conf.h	/^	char* pattern_str;$/;"	m	struct:vhost_loc_conf_s
pi	xml_tree.h	/^		XmlNodePi pi;$/;"	m	union:_XmlNode::__anon2
pool	conf.h	/^	pool_t* pool;$/;"	m	struct:conf_s
pool	server.c	/^	pool_t* pool;$/;"	m	struct:server_s	file:
pool	typedef.h	/^	pool_t* pool;$/;"	m	struct:array_s
pool	typedef.h	/^	pool_t* pool;$/;"	m	struct:http_request_s
pool_alloc	pool.c	/^char* pool_alloc(pool_t* thiz, int size)$/;"	f
pool_calloc	pool.c	/^char* pool_calloc(pool_t* thiz, int size)$/;"	f
pool_create	pool.c	/^pool_t* pool_create(int size)$/;"	f
pool_destroy	pool.c	/^int pool_destroy(pool_t* thiz)$/;"	f
pool_node_s	pool.c	/^typdef struct pool_node_s$/;"	s	file:
pool_node_t	pool.c	/^}pool_node_t;$/;"	v	typeref:struct:pool_node_s
pool_reset	pool.c	/^int pool_reset(pool_t* thiz)$/;"	f
pool_s	pool.c	/^typedef struct pool_s$/;"	s	file:
pool_strdup	pool.c	/^char* pool_strdup(pool_t* thiz, char* str)$/;"	f
pool_t	pool.c	/^}pool_t;$/;"	t	typeref:struct:pool_s	file:
pool_t	pool.h	/^typedef struct pool_s pool_t;$/;"	t	typeref:struct:pool_s
port	conf.h	/^	int port;$/;"	m	struct:conf_s
port	typedef.h	/^	int port;$/;"	m	struct:url_s
pos	typedef.h	/^	char* pos;$/;"	m	struct:buf_s
priv	module.h	/^	char priv[0];$/;"	m	struct:_module
priv	modules/module_default.c	/^	char priv[1];$/;"	m	struct:_ModuleDefaultPriv	file:
priv	upstream.h	/^	char priv[1];$/;"	m	struct:upstream_s
priv	xml_builder.h	/^	char priv[1];$/;"	m	struct:_XmlBuilder
process	module.h	/^	MODULE_PROCESS_FUNC process;$/;"	m	struct:_module
query_string	typedef.h	/^	st_t query_string;$/;"	m	struct:url_s
r	connection.h	/^	http_request_t r;$/;"	m	struct:connection_s
read_file	utils.c	/^char* read_file(const char* file_name)$/;"	f
read_ptr	xml_parser.c	/^	const char* read_ptr;$/;"	m	struct:_XmlParser	file:
reg	trash/vhost.c	/^	regex_t reg;$/;"	m	struct:_VhostLoc	file:
req_ctx	trash/vhost.c	/^	HttpReqCtx req_ctx;$/;"	m	struct:_Vhost	file:
request_pool_size	conf.h	/^	int request_pool_size;$/;"	m	struct:conf_s
response	typedef.h	/^	http_response_t* response;$/;"	m	struct:http_request_s
root	conf.h	/^	char* root;$/;"	m	struct:conf_s
root	conf.h	/^	char* root;$/;"	m	struct:vhost_conf_s
root	conf.h	/^	char* root;$/;"	m	struct:vhost_loc_conf_s
root	trash/vhost.c	/^	char* root;	$/;"	m	struct:_Vhost	file:
root	trash/vhost.c	/^	char* root;$/;"	m	struct:_VhostLoc	file:
root	xml_builder_tree.c	/^	XmlNode* root;$/;"	m	struct:_PrivInfo	file:
running	connection.h	/^	int running;$/;"	m	struct:connection_s
running	server.c	/^	int running;$/;"	m	struct:server_s	file:
schema	typedef.h	/^	str_t schema;$/;"	m	struct:url_s
server	trash/vhost.c	/^	Server* server;$/;"	m	struct:_Vhost	file:
server_create	server.c	/^server_t* server_create(const char* config_file)$/;"	f
server_destroy	server.c	/^int server_destroy(server_t* thiz)$/;"	f
server_guard_proc	server.c	/^static void* server_guard_proc(void* ctx)$/;"	f	file:
server_listen_proc	server.c	/^static void* server_listen_proc(void* ctx)$/;"	f	file:
server_s	server.c	/^typedef struct server_s$/;"	s	file:
server_t	connection.h	/^typedef struct server_s server_t;$/;"	t	typeref:struct:server_s
server_t	server.c	/^}server_t;$/;"	t	typeref:struct:server_s	file:
sibling	xml_tree.h	/^	struct _XmlNode* sibling;$/;"	m	struct:_XmlNode	typeref:struct:_XmlNode::_XmlNode
start	typedef.h	/^	char* start;$/;"	m	struct:buf_s
start_time	connection.h	/^	time_t start_time;$/;"	m	struct:connection_s
status	typedef.h	/^	int status;$/;"	m	struct:http_response_s
status	utils.c	/^	int status;$/;"	m	struct:http_status_s	file:
str_s	typedef.h	/^typedef struct str_s$/;"	s
str_t	typedef.h	/^}str_t;$/;"	t	typeref:struct:str_s
strtrim	xml_parser.c	/^static const char* strtrim(char* str)$/;"	f	file:
text	xml_tree.h	/^		char* text;$/;"	m	union:_XmlNode::__anon2
timedout	connection.h	/^	int timedout;$/;"	m	struct:connection_s
type	xml_tree.h	/^	XmlNodeType type;$/;"	m	struct:_XmlNode
u	xml_tree.h	/^	}u;$/;"	m	struct:_XmlNode	typeref:union:_XmlNode::__anon2
upstream	typedef.h	/^	upstream_t* upstream;$/;"	m	struct:http_request_s
upstream_s	upstream.h	/^typedef struct upstream_s$/;"	s
upstream_t	upstream.h	/^}upstream_t;$/;"	t	typeref:struct:upstream_s
url	typedef.h	/^	url_t url;$/;"	m	struct:http_request_s
url_s	typedef.h	/^typedef struct url_s$/;"	s
url_t	typedef.h	/^}url_t;$/;"	t	typeref:struct:url_s
usragent	typedef.h	/^	str_t usragent;$/;"	m	struct:http_request_s
value	typedef.h	/^	str_t value;$/;"	m	struct:http_header_s
value	xml_tree.h	/^	char* value;$/;"	m	struct:_XmlAttr
values	conf.h	/^	array_t values;$/;"	m	struct:module_param_s
verbose	utils.c	/^	const char* verbose;$/;"	m	struct:http_status_s	file:
version	conf.h	/^	char* version;$/;"	m	struct:module_so_conf_s
version	typedef.h	/^	http_version_e version;$/;"	m	struct:http_request_s
vhost_conf_s	conf.h	/^typedef struct vhost_conf_s$/;"	s
vhost_conf_t	conf.h	/^}vhost_conf_t;$/;"	t	typeref:struct:vhost_conf_s
vhost_create	trash/vhost.c	/^Vhost* vhost_create(Server* server, VhostConf* conf)$/;"	f
vhost_destroy	trash/vhost.c	/^Ret vhost_destroy(Vhost* thiz)$/;"	f
vhost_handle_req	trash/vhost.c	/^Ret vhost_handle_req(Vhost* thiz, HttpReq* req, HttpResp* resp)$/;"	f
vhost_loc_conf_s	conf.h	/^typedef struct vhost_loc_conf_s $/;"	s
vhost_loc_conf_t	conf.h	/^}vhost_loc_conf_t;$/;"	t	typeref:struct:vhost_loc_conf_s
vhost_match	trash/vhost.c	/^Ret vhost_match(Vhost* thiz, HttpReq* req)$/;"	f
vhosts	conf.h	/^	array_t vhosts;        \/\/vhost_conf_t*$/;"	m	struct:conf_s
xml_attr_destroy	xml_tree.c	/^void xml_attr_destroy(XmlAttr* attr)$/;"	f
xml_builder_destroy	xml_builder.h	/^static inline void xml_builder_destroy(XmlBuilder* thiz)$/;"	f
xml_builder_get_tree	xml_builder_tree.c	/^XmlNode*    xml_builder_get_tree(XmlBuilder* thiz)$/;"	f
xml_builder_on_comment	xml_builder.h	/^static inline void xml_builder_on_comment(XmlBuilder* thiz, const char* text, size_t length)$/;"	f
xml_builder_on_end_element	xml_builder.h	/^static inline void xml_builder_on_end_element(XmlBuilder* thiz, const char* tag)$/;"	f
xml_builder_on_error	xml_builder.h	/^static inline void xml_builder_on_error(XmlBuilder* thiz, int line, int row, const char* message)$/;"	f
xml_builder_on_pi_element	xml_builder.h	/^static inline void xml_builder_on_pi_element(XmlBuilder* thiz, const char* tag, const char** attrs)$/;"	f
xml_builder_on_start_element	xml_builder.h	/^static inline void xml_builder_on_start_element(XmlBuilder* thiz, const char* tag, const char** attrs)$/;"	f
xml_builder_on_text	xml_builder.h	/^static inline void xml_builder_on_text(XmlBuilder* thiz, const char* text, size_t length)$/;"	f
xml_builder_tree_create	xml_builder_tree.c	/^XmlBuilder* xml_builder_tree_create(void)$/;"	f
xml_builder_tree_destroy	xml_builder_tree.c	/^static void xml_builder_tree_destroy(XmlBuilder* thiz)$/;"	f	file:
xml_builder_tree_on_comment	xml_builder_tree.c	/^static void xml_builder_tree_on_comment(XmlBuilder* thiz, const char* text, size_t length)$/;"	f	file:
xml_builder_tree_on_end_element	xml_builder_tree.c	/^static void xml_builder_tree_on_end_element(XmlBuilder* thiz, const char* tag)$/;"	f	file:
xml_builder_tree_on_error	xml_builder_tree.c	/^static void xml_builder_tree_on_error(XmlBuilder* thiz, int line, int row, const char* message)$/;"	f	file:
xml_builder_tree_on_pi_element	xml_builder_tree.c	/^static void xml_builder_tree_on_pi_element(XmlBuilder* thiz, const char* tag, const char** attrs)$/;"	f	file:
xml_builder_tree_on_start_element	xml_builder_tree.c	/^static void xml_builder_tree_on_start_element(XmlBuilder* thiz, const char* tag, const char** attrs)$/;"	f	file:
xml_builder_tree_on_text	xml_builder_tree.c	/^static void xml_builder_tree_on_text(XmlBuilder* thiz, const char* text, size_t length)$/;"	f	file:
xml_node_append_attr	xml_tree.c	/^void xml_node_append_attr(XmlNode* node, const char* name, const char* value)$/;"	f
xml_node_append_child	xml_tree.c	/^XmlNode* xml_node_append_child(XmlNode* node, XmlNode* child)$/;"	f
xml_node_append_sibling	xml_tree.c	/^XmlNode* xml_node_append_sibling(XmlNode* node, XmlNode* sibling)$/;"	f
xml_node_create_comment	xml_tree.c	/^XmlNode* xml_node_create_comment(const char* comment)$/;"	f
xml_node_create_normal	xml_tree.c	/^XmlNode* xml_node_create_normal(const char* name, const char** attrs)$/;"	f
xml_node_create_pi	xml_tree.c	/^XmlNode* xml_node_create_pi(const char* name, const char** attrs)$/;"	f
xml_node_create_text	xml_tree.c	/^XmlNode* xml_node_create_text(const char* text)$/;"	f
xml_node_destroy	xml_tree.c	/^void xml_node_destroy(XmlNode* node)$/;"	f
xml_node_visit	xml_tree.c	/^void xml_node_visit(XmlNode* node, XmlBuilder* builder)$/;"	f
xml_parser_create	xml_parser.c	/^XmlParser* xml_parser_create(void)$/;"	f
xml_parser_destroy	xml_parser.c	/^void xml_parser_destroy(XmlParser* thiz)$/;"	f
xml_parser_parse	xml_parser.c	/^void xml_parser_parse(XmlParser* thiz, const char* xml)$/;"	f
xml_parser_parse_attrs	xml_parser.c	/^static void xml_parser_parse_attrs(XmlParser* thiz, char end_char)$/;"	f	file:
xml_parser_parse_comment	xml_parser.c	/^static void xml_parser_parse_comment(XmlParser* thiz)$/;"	f	file:
xml_parser_parse_end_tag	xml_parser.c	/^static void xml_parser_parse_end_tag(XmlParser* thiz)$/;"	f	file:
xml_parser_parse_entity	xml_parser.c	/^static void xml_parser_parse_entity(XmlParser* thiz)$/;"	f	file:
xml_parser_parse_pi	xml_parser.c	/^static void xml_parser_parse_pi(XmlParser* thiz)$/;"	f	file:
xml_parser_parse_start_tag	xml_parser.c	/^static void xml_parser_parse_start_tag(XmlParser* thiz)$/;"	f	file:
xml_parser_parse_text	xml_parser.c	/^static void xml_parser_parse_text(XmlParser* thiz)$/;"	f	file:
xml_parser_reset_buffer	xml_parser.c	/^static void xml_parser_reset_buffer(XmlParser* thiz)$/;"	f	file:
xml_parser_set_builder	xml_parser.c	/^void xml_parser_set_builder(XmlParser* thiz, XmlBuilder* builder)$/;"	f
xml_parser_strdup	xml_parser.c	/^static int xml_parser_strdup(XmlParser* thiz, const char* start, size_t length)$/;"	f	file:
xml_tree_read_dup_str	xml_tree.c	/^Ret xml_tree_read_dup_str(XmlNode* node, char** out)$/;"	f
xml_tree_read_int	xml_tree.c	/^Ret xml_tree_read_int(XmlNode* node, int* out)$/;"	f
xml_tree_read_str	xml_tree.c	/^Ret xml_tree_read_str(XmlNode* node, char** out)$/;"	f
